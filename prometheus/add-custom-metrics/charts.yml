alertRelabelConfigs: null
alertmanager:
  affinity: {}
  baseURL: http://localhost:9093
  clusterPeers: []
  configFileName: alertmanager.yml
  configFromSecret: ''
  configMapOverrideName: ''
  deploymentAnnotations: {}
  dnsConfig: {}
  emptyDir:
    sizeLimit: ''
  enabled: true
  extraArgs: {}
  extraConfigmapMounts: []
  extraEnv: {}
  extraInitContainers: []
  extraSecretMounts: []
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/prometheus/alertmanager
    tag: v0.23.0
  ingress:
    annotations: {}
    enabled: false
    extraLabels: {}
    extraPaths: []
    hosts: []
    path: /
    pathType: Prefix
    tls: []
  name: alertmanager
  nodeSelector: {}
  persistentVolume:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ''
    mountPath: /data
    size: 2Gi
    subPath: ''
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  podLabels: {}
  podSecurityPolicy:
    annotations: {}
  prefixURL: ''
  priorityClassName: ''
  probeHeaders: []
  replicaCount: 1
  resources: {}
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  service:
    annotations: {}
    clusterIP: ''
    externalIPs: []
    labels: {}
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    servicePort: 80
    sessionAffinity: None
    type: ClusterIP
  statefulSet:
    annotations: {}
    enabled: false
    headless:
      annotations: {}
      enableMeshPeer: false
      labels: {}
      servicePort: 80
    labels: {}
    podManagementPolicy: OrderedReady
  tolerations: []
  useClusterRole: true
  useExistingRole: false
alertmanagerFiles:
  alertmanager.yml:
    global: {}
    receivers:
      - name: default-receiver
    route:
      group_interval: 5m
      group_wait: 10s
      receiver: default-receiver
      repeat_interval: 3h
configmapReload:
  alertmanager:
    enabled: true
    extraArgs: {}
    extraConfigmapMounts: []
    extraVolumeDirs: []
    image:
      pullPolicy: IfNotPresent
      repository: jimmidyson/configmap-reload
      tag: v0.5.0
    name: configmap-reload
    resources: {}
  prometheus:
    enabled: true
    extraArgs: {}
    extraConfigmapMounts: []
    extraVolumeDirs: []
    image:
      pullPolicy: IfNotPresent
      repository: jimmidyson/configmap-reload
      tag: v0.5.0
    name: configmap-reload
    resources: {}
extraScrapeConfigs: null
forceNamespace: null
imagePullSecrets: null
kubeStateMetrics:
  enabled: false
networkPolicy:
  enabled: false
nodeExporter:
  container:
    securityContext:
      allowPrivilegeEscalation: false
  dnsConfig: {}
  enabled: true
  extraArgs: {}
  extraConfigmapMounts: []
  extraHostPathMounts: []
  extraInitContainers: []
  hostNetwork: true
  hostPID: true
  hostRootfs: true
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/prometheus/node-exporter
    tag: v1.3.0
  name: node-exporter
  nodeSelector: {}
  pod:
    labels: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  podSecurityPolicy:
    annotations: {}
  priorityClassName: ''
  resources: {}
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  service:
    annotations:
      prometheus.io/scrape: 'true'
    clusterIP: None
    externalIPs: []
    hostPort: 9100
    labels: {}
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    servicePort: 9100
    type: ClusterIP
  tolerations: []
  updateStrategy:
    type: RollingUpdate
podSecurityPolicy:
  enabled: false
pushgateway:
  deploymentAnnotations: {}
  dnsConfig: {}
  enabled: true
  extraArgs: {}
  extraInitContainers: []
  image:
    pullPolicy: IfNotPresent
    repository: prom/pushgateway
    tag: v1.4.2
  ingress:
    annotations: {}
    enabled: false
    extraPaths: []
    hosts: []
    path: /
    pathType: Prefix
    tls: []
  name: pushgateway
  nodeSelector: {}
  persistentVolume:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: false
    existingClaim: ''
    mountPath: /data
    size: 2Gi
    subPath: ''
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  podLabels: {}
  podSecurityPolicy:
    annotations: {}
  priorityClassName: ''
  replicaCount: 1
  resources: {}
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
  service:
    annotations:
      prometheus.io/probe: pushgateway
    clusterIP: ''
    externalIPs: []
    labels: {}
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    servicePort: 9091
    type: ClusterIP
  tolerations: []
  verticalAutoscaler:
    enabled: false
rbac:
  create: true
ruleFiles: {}
server:
  affinity: {}
  alertmanagers: []
  baseURL: ''
  configMapOverrideName: ''
  configPath: /etc/config/prometheus.yml
  defaultFlagsOverride: []
  deploymentAnnotations: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  emptyDir:
    sizeLimit: ''
  enableServiceLinks: true
  enabled: true
  env: []
  extraArgs: {}
  extraConfigmapMounts: []
  extraFlags:
    - web.enable-lifecycle
  extraHostPathMounts: []
  extraInitContainers: []
  extraSecretMounts: []
  extraVolumeMounts: []
  extraVolumes: []
  global:
    evaluation_interval: 1m
    scrape_interval: 1m
    scrape_timeout: 10s
  hostAliases: []
  hostNetwork: false
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/prometheus/prometheus
    tag: v2.34.0
  ingress:
    annotations: {}
    enabled: false
    extraLabels: {}
    extraPaths: []
    hosts: []
    path: /
    pathType: Prefix
    tls: []
  livenessProbeFailureThreshold: 3
  livenessProbeInitialDelay: 30
  livenessProbePeriodSeconds: 15
  livenessProbeSuccessThreshold: 1
  livenessProbeTimeout: 10
  name: server
  nodeSelector: {}
  persistentVolume:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ''
    mountPath: /data
    size: 8Gi
    subPath: ''
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  podLabels: {}
  podSecurityPolicy:
    annotations: {}
  prefixURL: ''
  priorityClassName: ''
  probeHeaders: []
  probeScheme: HTTP
  readinessProbeFailureThreshold: 3
  readinessProbeInitialDelay: 30
  readinessProbePeriodSeconds: 5
  readinessProbeSuccessThreshold: 1
  readinessProbeTimeout: 4
  remoteRead: []
  remoteWrite: []
  replicaCount: 1
  resources: {}
  retention: 15d
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  service:
    annotations: {}
    clusterIP: ''
    enabled: true
    externalIPs: []
    gRPC:
      enabled: false
      servicePort: 10901
    labels: {}
    loadBalancerIP: '192.168.1.xxx'
    loadBalancerSourceRanges: []
    servicePort: 80
    sessionAffinity: None
    statefulsetReplica:
      enabled: false
      replica: 0
    type: LoadBalancer
  sidecarContainers: {}
  sidecarTemplateValues: {}
  startupProbe:
    enabled: false
    failureThreshold: 30
    periodSeconds: 5
    timeoutSeconds: 10
  statefulSet:
    annotations: {}
    enabled: false
    headless:
      annotations: {}
      gRPC:
        enabled: false
        servicePort: 10901
      labels: {}
      servicePort: 80
    labels: {}
    podManagementPolicy: OrderedReady
  storagePath: ''
  tcpSocketProbeEnabled: false
  terminationGracePeriodSeconds: 300
  tolerations: []
  verticalAutoscaler:
    enabled: false
serverFiles:
  alerting_rules.yml: {}
  alerts: {}
  prometheus.yml:
    rule_files:
      - /etc/config/recording_rules.yml
      - /etc/config/alerting_rules.yml
      - /etc/config/rules
      - /etc/config/alerts
    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
              - localhost:9090
      - job_name: 'custom-job-name'
        scheme: https
        metrics_path: /dizin/metric
        static_configs:
        - targets: ['subdomain.domain.com']8
      - job_name: 'custom-job-name'
        scheme: https
        metrics_path: /dizin/metric
        static_configs:
        - targets: ['subdomain.domain.com']
  recording_rules.yml: {}
  rules: {}
serviceAccounts:
  alertmanager:
    annotations: {}
    create: true
    name: null
  nodeExporter:
    annotations: {}
    create: true
    name: null
  pushgateway:
    annotations: {}
    create: true
    name: null
  server:
    annotations: {}
    create: true
    name: null
